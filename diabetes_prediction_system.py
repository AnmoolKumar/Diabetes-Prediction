# -*- coding: utf-8 -*-
"""Diabetes Prediction System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JucU1ZKC_2Kw9R-xUaymQ2xikKW_BP7c
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

# loading the dataset to pandas dataframe
db_ds = pd.read_csv('/content/diabetes.csv')

# number of rows and cols in this dataset
db_ds.shape

# getting the statistical measures of data
db_ds.describe()

db_ds['Outcome'].value_counts()

"""0 --> Non-Diabetic
1 --> Diabetic
"""

db_ds.groupby('Outcome').mean()

# seperating data and labels
x = db_ds.drop(columns = 'Outcome',  axis=1)
y = db_ds['Outcome']

print(x)

print(y)

print(x)

print(y)

"""Train Test Split"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, stratify = y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Training the Model"""

classifier = svm.SVC(kernel = 'linear')

# training the support vector machine classifier
classifier.fit(x_train, y_train)

# accuracy on training data
x_test_predict = classifier.predict(x_train)
train_data_accuracy = accuracy_score(x_test_predict, y_train)

print('Accuracy score of train data : ', train_data_accuracy)

x_test_predict = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_predict, y_test)

print('Accuracy score of test data : ', test_data_accuracy)

"""Prediction System"""

input = (0,125,180,0,10,37.6,0.191,30)

# change input to m=numpy array
numpy_input = np.asarray(input)

# reshape array for predicting 1 instance
input_reshaped = numpy_input.reshape(1,-1)


prediction = classifier.predict(input_reshaped)

if(prediction[0] == 0):
    print('The person is non diabetic');
else:
    print('The person is diabetic');

"""Save trained model"""

import pickle as pi

filename = 'trained_model.sav'
pi.dump(classifier, open(filename, 'wb'))

# loading the saved model
loaded_model = pi.load(open('trained_model.sav', 'rb'))

input = (0,125,180,0,10,37.6,0.191,30)

# change input to m=numpy array
numpy_input = np.asarray(input)

# reshape array for predicting 1 instance
input_reshaped = numpy_input.reshape(1,-1)

#standardize input
#std_input = scaler.transform(input_reshaped)
#print(std_input)

prediction = loaded_model.predict(input_reshaped)
print(prediction)

if(prediction[0] == 0):
    print('The person is non diabetic');
else:
    print('The person is diabetic');

